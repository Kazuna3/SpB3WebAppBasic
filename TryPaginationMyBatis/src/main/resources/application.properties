spring.application.name=TryPaginationMyBatis

# <PostgreSqlの設定>
# PostgreSql を使用する場合は、コメント行先頭の「#-#」を削除してコメントインし、H2の設定を「#-#」でコメントアウトすること。
#-#spring.datasource.driver-class-name=org.postgresql.Driver
# 次行の設定では、接続できず。理由は、MyBatisPractice と言う DB を作らなかったため。
# spring.datasource.url=jdbc:postgresql://localhost:5432/MyBatisPractice
# 次行の設定で接続できた。
# spring.datasource.url=jdbc:postgresql:postgres
# 次行の設定で接続できた。 
#-#spring.datasource.url=jdbc:postgresql://localhost:5432/MyBatisPractice
#-#spring.datasource.username=postgres
#-#spring.datasource.password=Kongou173Post
# </PostgreSqlの設定>
########################################
# <H2の設定>
# H2 を使用する場合は、コメント行先頭の「#-#」を削除してコメントインし、H2の設定を「#-#」でコメントアウトすること。
# 利用するドライバ、H2を使う場合はこの値で固定
spring.datasource.driver-class-name=org.h2.Driver

# インメモリで使い、データベース名はtestdbとする
spring.datasource.url=jdbc:h2:mem:testdb

# ここで指定したユーザが作成される
spring.datasource.username=sa

# 上で指定したユーザのパスワードを指定
spring.datasource.password=

# data.sqlをschema.sqlの後に読み込むように設定
spring.jpa.defer-datasource-initialization=true
# </H2の設定>
########################################
# <SQLロギングの設定>
# log に SQL を出力する。

# ログレベルの選択肢は次の通りであるが、通常はWARNまたは無指定が適当と考える。
# ERROR, WARN, INFO, DEBUG, TRACE
# logging.level.org.springframework=ERROR
logging.level.org.springframework=WARN
# logging.level.org.springframework=INFO
# logging.level.org.springframework=DEBUG
# logging.level.org.springframework=TRACE

# リポジトリのパッケージ名のフルパス文字列か、
# 完全修飾クラス名（FQCN（fully-qualified class name））を記述する。
# ログレベルの選択肢は次の通り。
# ERROR, WARN, INFO, DEBUG, TRACE
# DEBUG → 発行しているSQL文が出力される。
# TRACE → 発行しているSQL文と、Select文であれば、取得したレコード全件が出力される。
# 記述例 → logging.level.com.example.MyBatisPractice.repository=DEBUG
# 記述例 → logging.level.jp.co.rdb.repository=DEBUG
# 記述例 ↓ リポジトリのパッケージ名のフルパス文字列で指定した場合
# logging.level.jp.co.rdb.repository=TRACE
# 記述例 ↓ 完全修飾クラス名（FQCN）で指定した場合
# logging.level.jp.co.rdb.repository.PersonRepository=TRACE
logging.level.jp.co.rdb.repository.PersonRepository=TRACE
# </SQLロギングの設定>
########################################
# 次の設定は、［A］で resultType を単にクラス名（"Mansion"）のみとするために、必要になった。
# <select id="selectAll" resultType="Mansion"> ・・・［A］
### mybatis.type-aliases-package=com.example.MyBatisPractice.entity
mybatis.type-aliases-package=jp.co.rdb.entity
########################################
# 下の設定を行う事で、①のようにスネークケースをASでエイリアスしなくても済む。
# 言い換えると、ASを使わずに、②のように実装できる。
# ① SELECT id, user_name AS userName, email FROM teacher
# ② SELECT id, user_name, email FROM teacher
mybatis.configuration.map-underscore-to-camel-case=true
########################################
spring.jpa.open-in-view=false